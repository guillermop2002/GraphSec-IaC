{"$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json", "version": "2.1.0", "runs": [{"tool": {"driver": {"name": "Checkov", "version": "3.2.489", "informationUri": "https://checkov.io", "rules": [{"id": "CKV_AWS_158", "name": "Ensure that CloudWatch Log Group is encrypted by KMS", "shortDescription": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "fullDescription": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "help": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS\nResource: aws_cloudwatch_log_group.flow_log"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-general-policies/ensure-that-cloudwatch-log-group-is-encrypted-by-kms"}, {"id": "CKV_AWS_338", "name": "Ensure CloudWatch log groups retains logs for at least 1 year", "shortDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "fullDescription": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "help": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year\nResource: aws_cloudwatch_log_group.flow_log"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/bc-aws-338"}, {"id": "CKV_TF_1", "name": "Ensure Terraform module sources use a commit hash", "shortDescription": {"text": "Ensure Terraform module sources use a commit hash"}, "fullDescription": {"text": "Ensure Terraform module sources use a commit hash"}, "help": {"text": "Ensure Terraform module sources use a commit hash\nResource: s3_bucket"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/supply-chain-policies/terraform-policies/ensure-terraform-module-sources-use-git-url-with-commit-hash-revision"}, {"id": "CKV_AWS_148", "name": "Ensure no default VPC is planned to be provisioned", "shortDescription": {"text": "Ensure no default VPC is planned to be provisioned"}, "fullDescription": {"text": "Ensure no default VPC is planned to be provisioned"}, "help": {"text": "Ensure no default VPC is planned to be provisioned\nResource: module.vpc.aws_default_vpc.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-no-default-vpc-is-planned-to-be-provisioned"}, {"id": "CKV2_AWS_5", "name": "Ensure that Security Groups are attached to another resource", "shortDescription": {"text": "Ensure that Security Groups are attached to another resource"}, "fullDescription": {"text": "Ensure that Security Groups are attached to another resource"}, "help": {"text": "Ensure that Security Groups are attached to another resource\nResource: module.vpc_endpoints.aws_security_group.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-security-groups-are-attached-to-ec2-instances-or-elastic-network-interfaces-enis"}, {"id": "CKV2_AWS_11", "name": "Ensure VPC flow logging is enabled in all VPCs", "shortDescription": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "fullDescription": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "help": {"text": "Ensure VPC flow logging is enabled in all VPCs\nResource: module.vpc.aws_vpc.this[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-logging-policies/logging-9-enable-vpc-flow-logging"}, {"id": "CKV2_AWS_19", "name": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances", "shortDescription": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"}, "fullDescription": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"}, "help": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances\nResource: module.vpc.aws_eip.nat[0]"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/ensure-that-all-eip-addresses-allocated-to-a-vpc-are-attached-to-ec2-instances"}, {"id": "CKV2_AWS_12", "name": "Ensure the default security group of every VPC restricts all traffic", "shortDescription": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "fullDescription": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "help": {"text": "Ensure the default security group of every VPC restricts all traffic\nResource: module.vpc.aws_vpc.this"}, "defaultConfiguration": {"level": "error"}, "helpUri": "https://docs.prismacloud.io/en/enterprise-edition/policy-reference/aws-policies/aws-networking-policies/networking-4"}, {"id": "CKV2_GHA_1", "name": "Ensure top-level permissions are not set to write-all", "shortDescription": {"text": "Ensure top-level permissions are not set to write-all"}, "fullDescription": {"text": "Ensure top-level permissions are not set to write-all"}, "help": {"text": "Ensure top-level permissions are not set to write-all\nResource: on(Lock Threads)"}, "defaultConfiguration": {"level": "error"}}], "organization": "bridgecrew"}}, "results": [{"ruleId": "CKV_AWS_158", "ruleIndex": 0, "level": "error", "attachments": [], "message": {"text": "Ensure that CloudWatch Log Group is encrypted by KMS"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/examples/flow-log/main.tf"}, "region": {"startLine": 114, "endLine": 120, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"flow_log\" {\n  name_prefix = \"/aws/flow-log/vpc/${module.vpc.vpc_id}/${local.name}-external-\"\n\n  retention_in_days = 7\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/examples/flow-log/main.tf"}, "region": {"startLine": 114, "endLine": 120, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"flow_log\" {\n  name_prefix = \"/aws/flow-log/vpc/${module.vpc.vpc_id}/${local.name}-external-\"\n\n  retention_in_days = 7\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_TF_1", "ruleIndex": 2, "level": "error", "attachments": [], "message": {"text": "Ensure Terraform module sources use a commit hash"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/examples/flow-log/main.tf"}, "region": {"startLine": 101, "endLine": 112, "snippet": {"text": "module \"s3_bucket\" {\n  source  = \"terraform-aws-modules/s3-bucket/aws\"\n  version = \"~> 5.0\"\n\n  bucket_prefix = \"${local.name}-\"\n  force_destroy = true\n\n  # Policy works for flow logs as well\n  attach_waf_log_delivery_policy = true\n\n  tags = local.tags\n}\n"}}}}]}, {"ruleId": "CKV_AWS_148", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure no default VPC is planned to be provisioned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 1388, "endLine": 1401, "snippet": {"text": "resource \"aws_default_vpc\" \"this\" {\n  count = var.manage_default_vpc ? 1 : 0\n\n  region = var.region\n\n  enable_dns_support   = var.default_vpc_enable_dns_support\n  enable_dns_hostnames = var.default_vpc_enable_dns_hostnames\n\n  tags = merge(\n    { \"Name\" = coalesce(var.default_vpc_name, \"default\") },\n    var.tags,\n    var.default_vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV_AWS_148", "ruleIndex": 3, "level": "error", "attachments": [], "message": {"text": "Ensure no default VPC is planned to be provisioned"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 1388, "endLine": 1401, "snippet": {"text": "resource \"aws_default_vpc\" \"this\" {\n  count = var.manage_default_vpc ? 1 : 0\n\n  region = var.region\n\n  enable_dns_support   = var.default_vpc_enable_dns_support\n  enable_dns_hostnames = var.default_vpc_enable_dns_hostnames\n\n  tags = merge(\n    { \"Name\" = coalesce(var.default_vpc_name, \"default\") },\n    var.tags,\n    var.default_vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/modules/flow-log/main.tf"}, "region": {"startLine": 83, "endLine": 98, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  count = local.create_cloudwatch_log_group ? 1 : 0\n\n  region = var.region\n\n  name              = var.cloudwatch_log_group_use_name_prefix ? null : local.cloudwatch_log_group_name\n  name_prefix       = var.cloudwatch_log_group_use_name_prefix ? \"${local.cloudwatch_log_group_name}-\" : null\n  log_group_class   = var.cloudwatch_log_group_class\n  retention_in_days = var.cloudwatch_log_group_retention_in_days\n  kms_key_id        = var.cloudwatch_log_group_kms_key_id\n\n  tags = merge(\n    var.tags,\n    var.cloudwatch_log_group_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/modules/flow-log/main.tf"}, "region": {"startLine": 83, "endLine": 98, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  count = local.create_cloudwatch_log_group ? 1 : 0\n\n  region = var.region\n\n  name              = var.cloudwatch_log_group_use_name_prefix ? null : local.cloudwatch_log_group_name\n  name_prefix       = var.cloudwatch_log_group_use_name_prefix ? \"${local.cloudwatch_log_group_name}-\" : null\n  log_group_class   = var.cloudwatch_log_group_class\n  retention_in_days = var.cloudwatch_log_group_retention_in_days\n  kms_key_id        = var.cloudwatch_log_group_kms_key_id\n\n  tags = merge(\n    var.tags,\n    var.cloudwatch_log_group_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/modules/flow-log/main.tf"}, "region": {"startLine": 83, "endLine": 98, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  count = local.create_cloudwatch_log_group ? 1 : 0\n\n  region = var.region\n\n  name              = var.cloudwatch_log_group_use_name_prefix ? null : local.cloudwatch_log_group_name\n  name_prefix       = var.cloudwatch_log_group_use_name_prefix ? \"${local.cloudwatch_log_group_name}-\" : null\n  log_group_class   = var.cloudwatch_log_group_class\n  retention_in_days = var.cloudwatch_log_group_retention_in_days\n  kms_key_id        = var.cloudwatch_log_group_kms_key_id\n\n  tags = merge(\n    var.tags,\n    var.cloudwatch_log_group_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/modules/flow-log/main.tf"}, "region": {"startLine": 83, "endLine": 98, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  count = local.create_cloudwatch_log_group ? 1 : 0\n\n  region = var.region\n\n  name              = var.cloudwatch_log_group_use_name_prefix ? null : local.cloudwatch_log_group_name\n  name_prefix       = var.cloudwatch_log_group_use_name_prefix ? \"${local.cloudwatch_log_group_name}-\" : null\n  log_group_class   = var.cloudwatch_log_group_class\n  retention_in_days = var.cloudwatch_log_group_retention_in_days\n  kms_key_id        = var.cloudwatch_log_group_kms_key_id\n\n  tags = merge(\n    var.tags,\n    var.cloudwatch_log_group_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV_AWS_338", "ruleIndex": 1, "level": "error", "attachments": [], "message": {"text": "Ensure CloudWatch log groups retains logs for at least 1 year"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/modules/flow-log/main.tf"}, "region": {"startLine": 83, "endLine": 98, "snippet": {"text": "resource \"aws_cloudwatch_log_group\" \"this\" {\n  count = local.create_cloudwatch_log_group ? 1 : 0\n\n  region = var.region\n\n  name              = var.cloudwatch_log_group_use_name_prefix ? null : local.cloudwatch_log_group_name\n  name_prefix       = var.cloudwatch_log_group_use_name_prefix ? \"${local.cloudwatch_log_group_name}-\" : null\n  log_group_class   = var.cloudwatch_log_group_class\n  retention_in_days = var.cloudwatch_log_group_retention_in_days\n  kms_key_id        = var.cloudwatch_log_group_kms_key_id\n\n  tags = merge(\n    var.tags,\n    var.cloudwatch_log_group_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/modules/vpc-endpoints/main.tf"}, "region": {"startLine": 81, "endLine": 100, "snippet": {"text": "resource \"aws_security_group\" \"this\" {\n  count = var.create && var.create_security_group ? 1 : 0\n\n  region = var.region\n\n  name        = var.security_group_name\n  name_prefix = var.security_group_name_prefix\n  description = var.security_group_description\n  vpc_id      = var.vpc_id\n\n  tags = merge(\n    var.tags,\n    var.security_group_tags,\n    { \"Name\" = try(coalesce(var.security_group_name, var.security_group_name_prefix), \"\") },\n  )\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/modules/vpc-endpoints/main.tf"}, "region": {"startLine": 81, "endLine": 100, "snippet": {"text": "resource \"aws_security_group\" \"this\" {\n  count = var.create && var.create_security_group ? 1 : 0\n\n  region = var.region\n\n  name        = var.security_group_name\n  name_prefix = var.security_group_name_prefix\n  description = var.security_group_description\n  vpc_id      = var.vpc_id\n\n  tags = merge(\n    var.tags,\n    var.security_group_tags,\n    { \"Name\" = try(coalesce(var.security_group_name, var.security_group_name_prefix), \"\") },\n  )\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_5", "ruleIndex": 4, "level": "error", "attachments": [], "message": {"text": "Ensure that Security Groups are attached to another resource"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/modules/vpc-endpoints/main.tf"}, "region": {"startLine": 81, "endLine": 100, "snippet": {"text": "resource \"aws_security_group\" \"this\" {\n  count = var.create && var.create_security_group ? 1 : 0\n\n  region = var.region\n\n  name        = var.security_group_name\n  name_prefix = var.security_group_name_prefix\n  description = var.security_group_description\n  vpc_id      = var.vpc_id\n\n  tags = merge(\n    var.tags,\n    var.security_group_tags,\n    { \"Name\" = try(coalesce(var.security_group_name, var.security_group_name_prefix), \"\") },\n  )\n\n  lifecycle {\n    create_before_destroy = true\n  }\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_11", "ruleIndex": 5, "level": "error", "attachments": [], "message": {"text": "Ensure VPC flow logging is enabled in all VPCs"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_19", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 1207, "endLine": 1226, "snippet": {"text": "resource \"aws_eip\" \"nat\" {\n  count = local.create_vpc && var.enable_nat_gateway && !var.reuse_nat_ips ? local.nat_gateway_count : 0\n\n  region = var.region\n\n  domain = \"vpc\"\n\n  tags = merge(\n    {\n      \"Name\" = format(\n        \"${var.name}-%s\",\n        element(var.azs, var.single_nat_gateway ? 0 : count.index),\n      )\n    },\n    var.tags,\n    var.nat_eip_tags,\n  )\n\n  depends_on = [aws_internet_gateway.this]\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_19", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 1207, "endLine": 1226, "snippet": {"text": "resource \"aws_eip\" \"nat\" {\n  count = local.create_vpc && var.enable_nat_gateway && !var.reuse_nat_ips ? local.nat_gateway_count : 0\n\n  region = var.region\n\n  domain = \"vpc\"\n\n  tags = merge(\n    {\n      \"Name\" = format(\n        \"${var.name}-%s\",\n        element(var.azs, var.single_nat_gateway ? 0 : count.index),\n      )\n    },\n    var.tags,\n    var.nat_eip_tags,\n  )\n\n  depends_on = [aws_internet_gateway.this]\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_19", "ruleIndex": 6, "level": "error", "attachments": [], "message": {"text": "Ensure that all EIP addresses allocated to a VPC are attached to EC2 instances"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 1207, "endLine": 1226, "snippet": {"text": "resource \"aws_eip\" \"nat\" {\n  count = local.create_vpc && var.enable_nat_gateway && !var.reuse_nat_ips ? local.nat_gateway_count : 0\n\n  region = var.region\n\n  domain = \"vpc\"\n\n  tags = merge(\n    {\n      \"Name\" = format(\n        \"${var.name}-%s\",\n        element(var.azs, var.single_nat_gateway ? 0 : count.index),\n      )\n    },\n    var.tags,\n    var.nat_eip_tags,\n  )\n\n  depends_on = [aws_internet_gateway.this]\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_AWS_12", "ruleIndex": 7, "level": "error", "attachments": [], "message": {"text": "Ensure the default security group of every VPC restricts all traffic"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/main.tf"}, "region": {"startLine": 28, "endLine": 53, "snippet": {"text": "resource \"aws_vpc\" \"this\" {\n  count = local.create_vpc ? 1 : 0\n\n  region = var.region\n\n  cidr_block          = var.use_ipam_pool ? null : var.cidr\n  ipv4_ipam_pool_id   = var.ipv4_ipam_pool_id\n  ipv4_netmask_length = var.ipv4_netmask_length\n\n  assign_generated_ipv6_cidr_block     = var.enable_ipv6 && !var.use_ipam_pool ? true : null\n  ipv6_cidr_block                      = var.ipv6_cidr\n  ipv6_ipam_pool_id                    = var.ipv6_ipam_pool_id\n  ipv6_netmask_length                  = var.ipv6_netmask_length\n  ipv6_cidr_block_network_border_group = var.ipv6_cidr_block_network_border_group\n\n  instance_tenancy                     = var.instance_tenancy\n  enable_dns_hostnames                 = var.enable_dns_hostnames\n  enable_dns_support                   = var.enable_dns_support\n  enable_network_address_usage_metrics = var.enable_network_address_usage_metrics\n\n  tags = merge(\n    { \"Name\" = var.name },\n    var.tags,\n    var.vpc_tags,\n  )\n}\n"}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/.github/workflows/lock.yml"}, "region": {"startLine": 1, "endLine": 1, "snippet": {"text": ""}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/.github/workflows/pr-title.yml"}, "region": {"startLine": 1, "endLine": 1, "snippet": {"text": ""}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/.github/workflows/pre-commit.yml"}, "region": {"startLine": 1, "endLine": 1, "snippet": {"text": ""}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/.github/workflows/release.yml"}, "region": {"startLine": 1, "endLine": 1, "snippet": {"text": ""}}}}]}, {"ruleId": "CKV2_GHA_1", "ruleIndex": 8, "level": "error", "attachments": [], "message": {"text": "Ensure top-level permissions are not set to write-all"}, "locations": [{"physicalLocation": {"artifactLocation": {"uri": "terraform-aws-vpc/.github/workflows/stale-actions.yaml"}, "region": {"startLine": 1, "endLine": 1, "snippet": {"text": ""}}}}]}]}]}